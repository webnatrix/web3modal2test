import {
  proxy,
  require_buffer,
  snapshot,
  subscribe
} from "./chunk-I5NJBMNF.js";
import {
  __toESM
} from "./chunk-JZQ37OGZ.js";

// node_modules/@web3modal/core/dist/index.js
var import_buffer = __toESM(require_buffer());
var D;
var m = { ethereumClient: void 0, setEthereumClient(e) {
  D = e;
}, client() {
  if (D)
    return D;
  throw new Error("ClientCtrl has no client set");
} };
var i = proxy({ history: ["ConnectWallet"], view: "ConnectWallet", data: void 0 });
var L = { state: i, subscribe(e) {
  return subscribe(i, () => e(i));
}, push(e, t) {
  e !== i.view && (i.view = e, t && (i.data = t), i.history.push(e));
}, reset(e) {
  i.view = e, i.history = [e];
}, replace(e) {
  i.history.length > 1 && (i.history[i.history.length - 1] = e, i.view = e);
}, goBack() {
  if (i.history.length > 1) {
    i.history.pop();
    const [e] = i.history.slice(-1);
    i.view = e;
  }
}, setData(e) {
  i.data = e;
} };
var r = { WALLETCONNECT_DEEPLINK_CHOICE: "WALLETCONNECT_DEEPLINK_CHOICE", W3M_VERSION: "W3M_VERSION", W3M_PREFER_INJECTED_URL_FLAG: "w3mPreferInjected", RECOMMENDED_WALLET_AMOUNT: 9, isMobile() {
  return typeof window < "u" ? Boolean(window.matchMedia("(pointer:coarse)").matches || /Android|webOS|iPhone|iPad|iPod|BlackBerry|Opera Mini/u.test(navigator.userAgent)) : false;
}, isAndroid() {
  return r.isMobile() && navigator.userAgent.toLowerCase().includes("android");
}, isIos() {
  const e = navigator.userAgent.toLowerCase();
  return r.isMobile() && (e.includes("iphone") || e.includes("ipad"));
}, isHttpUrl(e) {
  return e.startsWith("http://") || e.startsWith("https://");
}, isArray(e) {
  return Array.isArray(e) && e.length > 0;
}, formatNativeUrl(e, t, n) {
  if (r.isHttpUrl(e))
    return this.formatUniversalUrl(e, t, n);
  let s = e;
  s.includes("://") || (s = e.replaceAll("/", "").replaceAll(":", ""), s = `${s}://`), s.endsWith("/") || (s = `${s}/`), this.setWalletConnectDeepLink(s, n);
  const a = encodeURIComponent(t);
  return `${s}wc?uri=${a}`;
}, formatUniversalUrl(e, t, n) {
  if (!r.isHttpUrl(e))
    return this.formatNativeUrl(e, t, n);
  let s = e;
  s.endsWith("/") || (s = `${s}/`), this.setWalletConnectDeepLink(s, n);
  const a = encodeURIComponent(t);
  return `${s}wc?uri=${a}`;
}, async wait(e) {
  return new Promise((t) => {
    setTimeout(t, e);
  });
}, openHref(e, t) {
  window.open(e, t, "noreferrer noopener");
}, setWalletConnectDeepLink(e, t) {
  try {
    localStorage.setItem(r.WALLETCONNECT_DEEPLINK_CHOICE, JSON.stringify({ href: e, name: t }));
  } catch {
    console.info("Unable to set WalletConnect deep link");
  }
}, setWalletConnectAndroidDeepLink(e) {
  try {
    const [t] = e.split("?");
    localStorage.setItem(r.WALLETCONNECT_DEEPLINK_CHOICE, JSON.stringify({ href: t, name: "Android" }));
  } catch {
    console.info("Unable to set WalletConnect android deep link");
  }
}, removeWalletConnectDeepLink() {
  try {
    localStorage.removeItem(r.WALLETCONNECT_DEEPLINK_CHOICE);
  } catch {
    console.info("Unable to remove WalletConnect deep link");
  }
}, setWeb3ModalVersionInStorage() {
  try {
    typeof localStorage < "u" && localStorage.setItem(r.W3M_VERSION, "2.6.2");
  } catch {
    console.info("Unable to set Web3Modal version in storage");
  }
}, getWalletRouterData() {
  var e;
  const t = (e = L.state.data) == null ? void 0 : e.Wallet;
  if (!t)
    throw new Error('Missing "Wallet" view data');
  return t;
}, getSwitchNetworkRouterData() {
  var e;
  const t = (e = L.state.data) == null ? void 0 : e.SwitchNetwork;
  if (!t)
    throw new Error('Missing "SwitchNetwork" view data');
  return t;
}, isPreferInjectedFlag() {
  return typeof location < "u" ? new URLSearchParams(location.search).has(r.W3M_PREFER_INJECTED_URL_FLAG) : false;
} };
var B = typeof location < "u" && (location.hostname.includes("localhost") || location.protocol.includes("https"));
var c = proxy({ enabled: B, userSessionId: "", events: [], connectedWalletId: void 0 });
var V = { state: c, subscribe(e) {
  return subscribe(c.events, () => e(snapshot(c.events[c.events.length - 1])));
}, initialize() {
  c.enabled && typeof (crypto == null ? void 0 : crypto.randomUUID) < "u" && (c.userSessionId = crypto.randomUUID());
}, setConnectedWalletId(e) {
  c.connectedWalletId = e;
}, click(e) {
  if (c.enabled) {
    const t = { type: "CLICK", name: e.name, userSessionId: c.userSessionId, timestamp: Date.now(), data: e };
    c.events.push(t);
  }
}, track(e) {
  if (c.enabled) {
    const t = { type: "TRACK", name: e.name, userSessionId: c.userSessionId, timestamp: Date.now(), data: e };
    c.events.push(t);
  }
}, view(e) {
  if (c.enabled) {
    const t = { type: "VIEW", name: e.name, userSessionId: c.userSessionId, timestamp: Date.now(), data: e };
    c.events.push(t);
  }
} };
var d = proxy({ selectedChain: void 0, chains: void 0, isCustomDesktop: false, isCustomMobile: false, isDataLoaded: false, isUiLoaded: false, isPreferInjected: false });
var v = { state: d, subscribe(e) {
  return subscribe(d, () => e(d));
}, setChains(e) {
  d.chains = e;
}, getSelectedChain() {
  const e = m.client().getNetwork().chain;
  return e && (d.selectedChain = e), d.selectedChain;
}, setSelectedChain(e) {
  d.selectedChain = e;
}, setIsCustomDesktop(e) {
  d.isCustomDesktop = e;
}, setIsCustomMobile(e) {
  d.isCustomMobile = e;
}, setIsDataLoaded(e) {
  d.isDataLoaded = e;
}, setIsUiLoaded(e) {
  d.isUiLoaded = e;
}, setIsPreferInjected(e) {
  d.isPreferInjected = e;
} };
var j = proxy({ projectId: "", mobileWallets: void 0, desktopWallets: void 0, walletImages: void 0, chainImages: void 0, tokenImages: void 0, tokenContracts: void 0, enableNetworkView: false, enableAccountView: true, enableExplorer: true, defaultChain: void 0, explorerExcludedWalletIds: void 0, explorerRecommendedWalletIds: void 0, termsOfServiceUrl: void 0, privacyPolicyUrl: void 0 });
var I = { state: j, subscribe(e) {
  return subscribe(j, () => e(j));
}, setConfig(e) {
  var t, n;
  V.initialize(), v.setIsCustomMobile(Boolean((t = e.mobileWallets) == null ? void 0 : t.length)), v.setIsCustomDesktop(Boolean((n = e.desktopWallets) == null ? void 0 : n.length)), v.setChains(m.client().chains), v.setIsPreferInjected(m.client().isInjectedProviderInstalled() && r.isPreferInjectedFlag()), e.defaultChain && v.setSelectedChain(e.defaultChain), r.setWeb3ModalVersionInStorage(), Object.assign(j, e);
} };
var o = proxy({ address: void 0, profileName: void 0, profileAvatar: void 0, profileLoading: false, balanceLoading: false, balance: void 0, isConnected: false });
var H = { state: o, subscribe(e) {
  return subscribe(o, () => e(o));
}, getAccount() {
  const e = m.client().getAccount();
  o.address = e.address, o.isConnected = e.isConnected;
}, async fetchProfile(e, t) {
  var n;
  try {
    o.profileLoading = true;
    const s = t ?? o.address, a = (n = v.state.chains) == null ? void 0 : n.find((l) => l.id === 1);
    if (s && a) {
      const l = await m.client().fetchEnsName({ address: s, chainId: 1 });
      if (l) {
        const p = await m.client().fetchEnsAvatar({ name: l, chainId: 1 });
        p && await e(p), o.profileAvatar = p;
      }
      o.profileName = l;
    }
  } finally {
    o.profileLoading = false;
  }
}, async fetchBalance(e) {
  try {
    const { chain: t } = m.client().getNetwork(), { tokenContracts: n } = I.state;
    let s;
    t && n && (s = n[t.id]), o.balanceLoading = true;
    const a = e ?? o.address;
    if (a) {
      const l = await m.client().fetchBalance({ address: a, token: s });
      o.balance = { amount: l.formatted, symbol: l.symbol };
    }
  } finally {
    o.balanceLoading = false;
  }
}, setAddress(e) {
  o.address = e;
}, setIsConnected(e) {
  o.isConnected = e;
}, resetBalance() {
  o.balance = void 0;
}, resetAccount() {
  o.address = void 0, o.isConnected = false, o.profileName = void 0, o.profileAvatar = void 0, o.balance = void 0;
} };
var M = "https://explorer-api.walletconnect.com";
async function O(e, t) {
  const n = new URL(e, M);
  return n.searchParams.append("projectId", I.state.projectId), Object.entries(t).forEach(([s, a]) => {
    a && n.searchParams.append(s, String(a));
  }), (await fetch(n)).json();
}
var h = { async getDesktopListings(e) {
  return O("/w3m/v1/getDesktopListings", e);
}, async getMobileListings(e) {
  return O("/w3m/v1/getMobileListings", e);
}, async getInjectedListings(e) {
  return O("/w3m/v1/getInjectedListings", e);
}, async getAllListings(e) {
  return O("/w3m/v1/getAllListings", e);
}, getWalletImageUrl(e) {
  return `${M}/w3m/v1/getWalletImage/${e}?projectId=${I.state.projectId}`;
}, getAssetImageUrl(e) {
  return `${M}/w3m/v1/getAssetImage/${e}?projectId=${I.state.projectId}`;
} };
var K = Object.defineProperty;
var P = Object.getOwnPropertySymbols;
var F = Object.prototype.hasOwnProperty;
var J = Object.prototype.propertyIsEnumerable;
var S = (e, t, n) => t in e ? K(e, t, { enumerable: true, configurable: true, writable: true, value: n }) : e[t] = n;
var z = (e, t) => {
  for (var n in t || (t = {}))
    F.call(t, n) && S(e, n, t[n]);
  if (P)
    for (var n of P(t))
      J.call(t, n) && S(e, n, t[n]);
  return e;
};
var _ = r.isMobile();
var u = proxy({ wallets: { listings: [], total: 0, page: 1 }, injectedWallets: [], search: { listings: [], total: 0, page: 1 }, recomendedWallets: [] });
var te = { state: u, async getRecomendedWallets() {
  const { explorerRecommendedWalletIds: e, explorerExcludedWalletIds: t } = I.state;
  if (e === "NONE" || t === "ALL" && !e)
    return u.recomendedWallets;
  if (r.isArray(e)) {
    const n = { recommendedIds: e.join(",") }, { listings: s } = await h.getAllListings(n), a = Object.values(s);
    a.sort((l, p) => {
      const W = e.indexOf(l.id), C = e.indexOf(p.id);
      return W - C;
    }), u.recomendedWallets = a;
  } else {
    const n = r.isArray(t), s = { page: 1, entries: r.RECOMMENDED_WALLET_AMOUNT, version: 2, excludedIds: n ? t.join(",") : void 0 }, { listings: a } = _ ? await h.getMobileListings(s) : await h.getDesktopListings(s);
    u.recomendedWallets = Object.values(a);
  }
  return u.recomendedWallets;
}, async getWallets(e) {
  const t = z({}, e), { explorerRecommendedWalletIds: n, explorerExcludedWalletIds: s } = I.state, { recomendedWallets: a } = u;
  if (s === "ALL")
    return u.wallets;
  a.length ? t.excludedIds = a.map((N) => N.id).join(",") : r.isArray(n) && (t.excludedIds = n.join(",")), r.isArray(s) && (t.excludedIds = [t.excludedIds, s].filter(Boolean).join(","));
  const { page: l, search: p } = e, { listings: W, total: C } = _ ? await h.getMobileListings(t) : await h.getDesktopListings(t), b = Object.values(W), A = p ? "search" : "wallets";
  return u[A] = { listings: [...u[A].listings, ...b], total: C, page: l ?? 1 }, { listings: b, total: C };
}, async getInjectedWallets() {
  const { listings: e } = await h.getInjectedListings({}), t = Object.values(e);
  return u.injectedWallets = t, u.injectedWallets;
}, getWalletImageUrl(e) {
  return h.getWalletImageUrl(e);
}, getAssetImageUrl(e) {
  return h.getAssetImageUrl(e);
}, resetSearch() {
  u.search = { listings: [], total: 0, page: 1 };
} };
var y = proxy({ pairingEnabled: false, pairingUri: "", pairingError: false });
var k = { state: y, subscribe(e) {
  return subscribe(y, () => e(y));
}, setPairingUri(e) {
  y.pairingUri = e;
}, setPairingError(e) {
  y.pairingError = e;
}, setPairingEnabled(e) {
  y.pairingEnabled = e;
} };
var E = proxy({ open: false });
var ne = { state: E, subscribe(e) {
  return subscribe(E, () => e(E));
}, async open(e) {
  return new Promise((t) => {
    const { isUiLoaded: n, isDataLoaded: s, isPreferInjected: a, selectedChain: l } = v.state, { isConnected: p } = H.state, { enableNetworkView: W } = I.state;
    if (k.setPairingEnabled(true), e != null && e.route)
      L.reset(e.route);
    else if (p)
      L.reset("Account");
    else if (W)
      L.reset("SelectNetwork");
    else if (a) {
      m.client().connectConnector("injected", l == null ? void 0 : l.id).catch((b) => console.error(b)), t();
      return;
    } else
      L.reset("ConnectWallet");
    const { pairingUri: C } = k.state;
    if (n && s && (C || p))
      E.open = true, t();
    else {
      const b = setInterval(() => {
        const A = v.state, N = k.state;
        A.isUiLoaded && A.isDataLoaded && (N.pairingUri || p) && (clearInterval(b), E.open = true, t());
      }, 200);
    }
  });
}, close() {
  E.open = false;
} };
var G = Object.defineProperty;
var x = Object.getOwnPropertySymbols;
var q = Object.prototype.hasOwnProperty;
var Q = Object.prototype.propertyIsEnumerable;
var R = (e, t, n) => t in e ? G(e, t, { enumerable: true, configurable: true, writable: true, value: n }) : e[t] = n;
var X = (e, t) => {
  for (var n in t || (t = {}))
    q.call(t, n) && R(e, n, t[n]);
  if (x)
    for (var n of x(t))
      Q.call(t, n) && R(e, n, t[n]);
  return e;
};
function Y() {
  return typeof matchMedia < "u" && matchMedia("(prefers-color-scheme: dark)").matches;
}
var U = proxy({ themeMode: Y() ? "dark" : "light" });
var se = { state: U, subscribe(e) {
  return subscribe(U, () => e(U));
}, setThemeConfig(e) {
  const { themeMode: t, themeVariables: n } = e;
  t && (U.themeMode = t), n && (U.themeVariables = X({}, n));
} };
var w = proxy({ open: false, message: "", variant: "success" });
var oe = { state: w, subscribe(e) {
  return subscribe(w, () => e(w));
}, openToast(e, t) {
  w.open = true, w.message = e, w.variant = t;
}, closeToast() {
  w.open = false;
} };
typeof window < "u" && (window.Buffer || (window.Buffer = import_buffer.Buffer), window.global || (window.global = window), window.process || (window.process = { env: {} }), window.global || (window.global = window));

export {
  m,
  L,
  r,
  V,
  v,
  I,
  H,
  te,
  k,
  ne,
  se,
  oe
};
//# sourceMappingURL=chunk-3KXO3OM6.js.map
