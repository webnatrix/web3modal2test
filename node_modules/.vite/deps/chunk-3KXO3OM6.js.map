{
  "version": 3,
  "sources": ["../../@web3modal/core/src/controllers/ClientCtrl.ts", "../../@web3modal/core/src/controllers/RouterCtrl.ts", "../../@web3modal/core/src/utils/CoreUtil.ts", "../../@web3modal/core/src/controllers/EventsCtrl.ts", "../../@web3modal/core/src/controllers/OptionsCtrl.ts", "../../@web3modal/core/src/controllers/ConfigCtrl.ts", "../../@web3modal/core/src/controllers/AccountCtrl.ts", "../../@web3modal/core/src/utils/ExplorerUtil.ts", "../../@web3modal/core/src/controllers/ExplorerCtrl.ts", "../../@web3modal/core/src/controllers/WcConnectionCtrl.ts", "../../@web3modal/core/src/controllers/ModalCtrl.ts", "../../@web3modal/core/src/controllers/ThemeCtrl.ts", "../../@web3modal/core/src/controllers/ToastCtrl.ts", "../../@web3modal/core/src/utils/PolyfillUtil.ts"],
  "sourcesContent": ["import type { ClientCtrlState } from '../types/controllerTypes'\n\n// -- initial state ------------------------------------------------ //\nlet client: ClientCtrlState['ethereumClient'] = undefined\n\n// -- controller -- As function to enable correct ssr handling\nexport const ClientCtrl = {\n  ethereumClient: undefined,\n\n  setEthereumClient(ethereumClient: ClientCtrlState['ethereumClient']) {\n    client = ethereumClient\n  },\n\n  client() {\n    if (client) {\n      return client\n    }\n\n    throw new Error('ClientCtrl has no client set')\n  }\n}\n", "import { proxy, subscribe as valtioSub } from 'valtio/vanilla'\nimport type { RouterCtrlState } from '../types/controllerTypes'\n\n// -- initial state ------------------------------------------------ //\nconst state = proxy<RouterCtrlState>({\n  history: ['ConnectWallet'],\n  view: 'ConnectWallet',\n  data: undefined\n})\n\n// -- controller --------------------------------------------------- //\nexport const RouterCtrl = {\n  state,\n\n  subscribe(callback: (newState: RouterCtrlState) => void) {\n    return valtioSub(state, () => callback(state))\n  },\n\n  push(view: RouterCtrlState['view'], data?: RouterCtrlState['data']) {\n    if (view !== state.view) {\n      state.view = view\n      if (data) {\n        state.data = data\n      }\n      state.history.push(view)\n    }\n  },\n\n  reset(view: RouterCtrlState['view']) {\n    state.view = view\n    state.history = [view]\n  },\n\n  replace(view: RouterCtrlState['view']) {\n    if (state.history.length > 1) {\n      state.history[state.history.length - 1] = view\n      state.view = view\n    }\n  },\n\n  goBack() {\n    if (state.history.length > 1) {\n      state.history.pop()\n      const [last] = state.history.slice(-1)\n      state.view = last\n    }\n  },\n\n  setData(data: RouterCtrlState['data']) {\n    state.data = data\n  }\n}\n", "import { RouterCtrl } from '../controllers/RouterCtrl'\n\nexport const CoreUtil = {\n  WALLETCONNECT_DEEPLINK_CHOICE: 'WALLETCONNECT_DEEPLINK_CHOICE',\n\n  W3M_VERSION: 'W3M_VERSION',\n\n  W3M_PREFER_INJECTED_URL_FLAG: 'w3mPreferInjected',\n\n  RECOMMENDED_WALLET_AMOUNT: 9,\n\n  isMobile() {\n    if (typeof window !== 'undefined') {\n      return Boolean(\n        window.matchMedia('(pointer:coarse)').matches ||\n          /Android|webOS|iPhone|iPad|iPod|BlackBerry|Opera Mini/u.test(navigator.userAgent)\n      )\n    }\n\n    return false\n  },\n\n  isAndroid() {\n    return CoreUtil.isMobile() && navigator.userAgent.toLowerCase().includes('android')\n  },\n\n  isIos() {\n    const ua = navigator.userAgent.toLowerCase()\n\n    return CoreUtil.isMobile() && (ua.includes('iphone') || ua.includes('ipad'))\n  },\n\n  isHttpUrl(url: string) {\n    return url.startsWith('http://') || url.startsWith('https://')\n  },\n\n  isArray<T>(data?: T | T[]): data is T[] {\n    return Array.isArray(data) && data.length > 0\n  },\n\n  formatNativeUrl(appUrl: string, wcUri: string, name: string): string {\n    if (CoreUtil.isHttpUrl(appUrl)) {\n      return this.formatUniversalUrl(appUrl, wcUri, name)\n    }\n    let safeAppUrl = appUrl\n    if (!safeAppUrl.includes('://')) {\n      safeAppUrl = appUrl.replaceAll('/', '').replaceAll(':', '')\n      safeAppUrl = `${safeAppUrl}://`\n    }\n    if (!safeAppUrl.endsWith('/')) {\n      safeAppUrl = `${safeAppUrl}/`\n    }\n    this.setWalletConnectDeepLink(safeAppUrl, name)\n    const encodedWcUrl = encodeURIComponent(wcUri)\n\n    return `${safeAppUrl}wc?uri=${encodedWcUrl}`\n  },\n\n  formatUniversalUrl(appUrl: string, wcUri: string, name: string): string {\n    if (!CoreUtil.isHttpUrl(appUrl)) {\n      return this.formatNativeUrl(appUrl, wcUri, name)\n    }\n    let safeAppUrl = appUrl\n    if (!safeAppUrl.endsWith('/')) {\n      safeAppUrl = `${safeAppUrl}/`\n    }\n    this.setWalletConnectDeepLink(safeAppUrl, name)\n    const encodedWcUrl = encodeURIComponent(wcUri)\n\n    return `${safeAppUrl}wc?uri=${encodedWcUrl}`\n  },\n\n  async wait(miliseconds: number) {\n    return new Promise(resolve => {\n      setTimeout(resolve, miliseconds)\n    })\n  },\n\n  openHref(href: string, target: '_blank' | '_self') {\n    window.open(href, target, 'noreferrer noopener')\n  },\n\n  setWalletConnectDeepLink(href: string, name: string) {\n    try {\n      localStorage.setItem(CoreUtil.WALLETCONNECT_DEEPLINK_CHOICE, JSON.stringify({ href, name }))\n    } catch {\n      console.info('Unable to set WalletConnect deep link')\n    }\n  },\n\n  setWalletConnectAndroidDeepLink(wcUri: string) {\n    try {\n      const [href] = wcUri.split('?')\n      localStorage.setItem(\n        CoreUtil.WALLETCONNECT_DEEPLINK_CHOICE,\n        JSON.stringify({ href, name: 'Android' })\n      )\n    } catch {\n      console.info('Unable to set WalletConnect android deep link')\n    }\n  },\n\n  removeWalletConnectDeepLink() {\n    try {\n      localStorage.removeItem(CoreUtil.WALLETCONNECT_DEEPLINK_CHOICE)\n    } catch {\n      console.info('Unable to remove WalletConnect deep link')\n    }\n  },\n\n  setWeb3ModalVersionInStorage() {\n    try {\n      if (typeof localStorage !== 'undefined') {\n        localStorage.setItem(CoreUtil.W3M_VERSION, process.env.ROLLUP_W3M_VERSION ?? 'UNKNOWN')\n      }\n    } catch {\n      console.info('Unable to set Web3Modal version in storage')\n    }\n  },\n\n  getWalletRouterData() {\n    const routerData = RouterCtrl.state.data?.Wallet\n    if (!routerData) {\n      throw new Error('Missing \"Wallet\" view data')\n    }\n\n    return routerData\n  },\n\n  getSwitchNetworkRouterData() {\n    const routerData = RouterCtrl.state.data?.SwitchNetwork\n    if (!routerData) {\n      throw new Error('Missing \"SwitchNetwork\" view data')\n    }\n\n    return routerData\n  },\n\n  isPreferInjectedFlag() {\n    if (typeof location !== 'undefined') {\n      const queryParams = new URLSearchParams(location.search)\n\n      return queryParams.has(CoreUtil.W3M_PREFER_INJECTED_URL_FLAG)\n    }\n\n    return false\n  }\n}\n", "import { proxy, snapshot, subscribe as valtioSub } from 'valtio/vanilla'\nimport type { EventsCtrlState, ModalEvent, ModalEventData } from '../types/controllerTypes'\n\n// -- helpers ------------------------------------------------------ //\nconst isEnabled =\n  typeof location !== 'undefined' &&\n  (location.hostname.includes('localhost') || location.protocol.includes('https'))\n\n// -- initial state ------------------------------------------------ //\nconst state = proxy<EventsCtrlState>({\n  enabled: isEnabled,\n  userSessionId: '',\n  events: [],\n  connectedWalletId: undefined\n})\n\n// -- controller --------------------------------------------------- //\nexport const EventsCtrl = {\n  state,\n\n  subscribe(callback: (newEvent: ModalEvent) => void) {\n    return valtioSub(state.events, () => callback(snapshot(state.events[state.events.length - 1])))\n  },\n\n  initialize() {\n    if (state.enabled && typeof crypto?.randomUUID !== 'undefined') {\n      state.userSessionId = crypto.randomUUID()\n    }\n  },\n\n  setConnectedWalletId(connectedWalletId: EventsCtrlState['connectedWalletId']) {\n    state.connectedWalletId = connectedWalletId\n  },\n\n  click(data: ModalEventData) {\n    if (state.enabled) {\n      const event = {\n        type: 'CLICK' as const,\n        name: data.name,\n        userSessionId: state.userSessionId,\n        timestamp: Date.now(),\n        data\n      }\n      state.events.push(event)\n    }\n  },\n\n  track(data: ModalEventData) {\n    if (state.enabled) {\n      const event = {\n        type: 'TRACK' as const,\n        name: data.name,\n        userSessionId: state.userSessionId,\n        timestamp: Date.now(),\n        data\n      }\n      state.events.push(event)\n    }\n  },\n\n  view(data: ModalEventData) {\n    if (state.enabled) {\n      const event = {\n        type: 'VIEW' as const,\n        name: data.name,\n        userSessionId: state.userSessionId,\n        timestamp: Date.now(),\n        data\n      }\n      state.events.push(event)\n    }\n  }\n}\n", "import { proxy, subscribe as valtioSub } from 'valtio/vanilla'\nimport type { OptionsCtrlState } from '../types/controllerTypes'\nimport { ClientCtrl } from './ClientCtrl'\n\n// -- initial state ------------------------------------------------ //\nconst state = proxy<OptionsCtrlState>({\n  selectedChain: undefined,\n  chains: undefined,\n  isCustomDesktop: false,\n  isCustomMobile: false,\n  isDataLoaded: false,\n  isUiLoaded: false,\n  isPreferInjected: false\n})\n\n// -- controller --------------------------------------------------- //\nexport const OptionsCtrl = {\n  state,\n\n  subscribe(callback: (newState: OptionsCtrlState) => void) {\n    return valtioSub(state, () => callback(state))\n  },\n\n  setChains(chains?: OptionsCtrlState['chains']) {\n    state.chains = chains\n  },\n\n  getSelectedChain() {\n    const selectedChain = ClientCtrl.client().getNetwork().chain\n    if (selectedChain) {\n      state.selectedChain = selectedChain\n    }\n\n    return state.selectedChain\n  },\n\n  setSelectedChain(selectedChain: OptionsCtrlState['selectedChain']) {\n    state.selectedChain = selectedChain\n  },\n\n  setIsCustomDesktop(isCustomDesktop: OptionsCtrlState['isCustomDesktop']) {\n    state.isCustomDesktop = isCustomDesktop\n  },\n\n  setIsCustomMobile(isCustomMobile: OptionsCtrlState['isCustomMobile']) {\n    state.isCustomMobile = isCustomMobile\n  },\n\n  setIsDataLoaded(isDataLoaded: OptionsCtrlState['isDataLoaded']) {\n    state.isDataLoaded = isDataLoaded\n  },\n\n  setIsUiLoaded(isUiLoaded: OptionsCtrlState['isUiLoaded']) {\n    state.isUiLoaded = isUiLoaded\n  },\n\n  setIsPreferInjected(isPreferInjected: OptionsCtrlState['isPreferInjected']) {\n    state.isPreferInjected = isPreferInjected\n  }\n}\n", "import { proxy, subscribe as valtioSub } from 'valtio/vanilla'\nimport type { ConfigCtrlState } from '../types/controllerTypes'\nimport { CoreUtil } from '../utils/CoreUtil'\nimport { ClientCtrl } from './ClientCtrl'\nimport { EventsCtrl } from './EventsCtrl'\nimport { OptionsCtrl } from './OptionsCtrl'\n\nconst state = proxy<ConfigCtrlState>({\n  projectId: '',\n  mobileWallets: undefined,\n  desktopWallets: undefined,\n  walletImages: undefined,\n  chainImages: undefined,\n  tokenImages: undefined,\n  tokenContracts: undefined,\n  enableNetworkView: false,\n  enableAccountView: true,\n  enableExplorer: true,\n  defaultChain: undefined,\n  explorerExcludedWalletIds: undefined,\n  explorerRecommendedWalletIds: undefined,\n  termsOfServiceUrl: undefined,\n  privacyPolicyUrl: undefined\n})\n\n// -- controller --------------------------------------------------- //\nexport const ConfigCtrl = {\n  state,\n\n  subscribe(callback: (newState: ConfigCtrlState) => void) {\n    return valtioSub(state, () => callback(state))\n  },\n\n  setConfig(config: ConfigCtrlState) {\n    EventsCtrl.initialize()\n    OptionsCtrl.setIsCustomMobile(Boolean(config.mobileWallets?.length))\n    OptionsCtrl.setIsCustomDesktop(Boolean(config.desktopWallets?.length))\n    OptionsCtrl.setChains(ClientCtrl.client().chains)\n    OptionsCtrl.setIsPreferInjected(\n      ClientCtrl.client().isInjectedProviderInstalled() && CoreUtil.isPreferInjectedFlag()\n    )\n\n    if (config.defaultChain) {\n      OptionsCtrl.setSelectedChain(config.defaultChain)\n    }\n\n    CoreUtil.setWeb3ModalVersionInStorage()\n\n    Object.assign(state, config)\n  }\n}\n", "import { proxy, subscribe as valtioSub } from 'valtio/vanilla'\nimport type { AccountCtrlState } from '../types/controllerTypes'\nimport { ClientCtrl } from './ClientCtrl'\nimport { ConfigCtrl } from './ConfigCtrl'\nimport { OptionsCtrl } from './OptionsCtrl'\n\n// -- initial state ------------------------------------------------ //\nconst state = proxy<AccountCtrlState>({\n  address: undefined,\n  profileName: undefined,\n  profileAvatar: undefined,\n  profileLoading: false,\n  balanceLoading: false,\n  balance: undefined,\n  isConnected: false\n})\n\n// -- controller --------------------------------------------------- //\nexport const AccountCtrl = {\n  state,\n\n  subscribe(callback: (newState: AccountCtrlState) => void) {\n    return valtioSub(state, () => callback(state))\n  },\n\n  getAccount() {\n    const account = ClientCtrl.client().getAccount()\n    state.address = account.address\n    state.isConnected = account.isConnected\n  },\n\n  async fetchProfile(\n    preloadAvatarFn: (avatar: string) => Promise<unknown>,\n    profileAddress?: `0x${string}`\n  ) {\n    try {\n      state.profileLoading = true\n      const address = profileAddress ?? state.address\n      const isMainnetConfigured = OptionsCtrl.state.chains?.find(chain => chain.id === 1)\n      if (address && isMainnetConfigured) {\n        const name = await ClientCtrl.client().fetchEnsName({ address, chainId: 1 })\n        if (name) {\n          const avatar = await ClientCtrl.client().fetchEnsAvatar({ name, chainId: 1 })\n          if (avatar) {\n            await preloadAvatarFn(avatar)\n          }\n          state.profileAvatar = avatar\n        }\n        state.profileName = name\n      }\n    } finally {\n      state.profileLoading = false\n    }\n  },\n\n  async fetchBalance(balanceAddress?: `0x${string}`) {\n    try {\n      const { chain } = ClientCtrl.client().getNetwork()\n      const { tokenContracts } = ConfigCtrl.state\n      let token: `0x${string}` | undefined = undefined\n      if (chain && tokenContracts) {\n        token = tokenContracts[chain.id] as `0x${string}`\n      }\n      state.balanceLoading = true\n      const address = balanceAddress ?? state.address\n      if (address) {\n        const balance = await ClientCtrl.client().fetchBalance({ address, token })\n        state.balance = { amount: balance.formatted, symbol: balance.symbol }\n      }\n    } finally {\n      state.balanceLoading = false\n    }\n  },\n\n  setAddress(address: AccountCtrlState['address']) {\n    state.address = address\n  },\n\n  setIsConnected(isConnected: AccountCtrlState['isConnected']) {\n    state.isConnected = isConnected\n  },\n\n  resetBalance() {\n    state.balance = undefined\n  },\n\n  resetAccount() {\n    state.address = undefined\n    state.isConnected = false\n    state.profileName = undefined\n    state.profileAvatar = undefined\n    state.balance = undefined\n  }\n}\n", "import { ConfigCtrl } from '../controllers/ConfigCtrl'\nimport type { ListingParams, ListingResponse } from '../types/controllerTypes'\n\n// -- Helpers -------------------------------------------------------\nconst W3M_API = 'https://explorer-api.walletconnect.com'\n\nasync function fetchListings(endpoint: string, params: ListingParams) {\n  const url = new URL(endpoint, W3M_API)\n  url.searchParams.append('projectId', ConfigCtrl.state.projectId)\n  Object.entries(params).forEach(([key, value]) => {\n    if (value) {\n      url.searchParams.append(key, String(value))\n    }\n  })\n  const request = await fetch(url)\n\n  return request.json() as Promise<ListingResponse>\n}\n\n// -- Utility -------------------------------------------------------\nexport const ExplorerUtil = {\n  async getDesktopListings(params: ListingParams) {\n    return fetchListings('/w3m/v1/getDesktopListings', params)\n  },\n\n  async getMobileListings(params: ListingParams) {\n    return fetchListings('/w3m/v1/getMobileListings', params)\n  },\n\n  async getInjectedListings(params: ListingParams) {\n    return fetchListings('/w3m/v1/getInjectedListings', params)\n  },\n\n  async getAllListings(params: ListingParams) {\n    return fetchListings('/w3m/v1/getAllListings', params)\n  },\n\n  getWalletImageUrl(imageId: string) {\n    return `${W3M_API}/w3m/v1/getWalletImage/${imageId}?projectId=${ConfigCtrl.state.projectId}`\n  },\n\n  getAssetImageUrl(imageId: string) {\n    return `${W3M_API}/w3m/v1/getAssetImage/${imageId}?projectId=${ConfigCtrl.state.projectId}`\n  }\n}\n", "import { proxy } from 'valtio/vanilla'\nimport type { ExplorerCtrlState, ListingParams } from '../types/controllerTypes'\nimport { CoreUtil } from '../utils/CoreUtil'\nimport { ExplorerUtil } from '../utils/ExplorerUtil'\nimport { ConfigCtrl } from './ConfigCtrl'\n\nconst isMobile = CoreUtil.isMobile()\n\n// -- initial state ------------------------------------------------ //\nconst state = proxy<ExplorerCtrlState>({\n  wallets: { listings: [], total: 0, page: 1 },\n  injectedWallets: [],\n  search: { listings: [], total: 0, page: 1 },\n  recomendedWallets: []\n})\n\n// -- controller --------------------------------------------------- //\nexport const ExplorerCtrl = {\n  state,\n\n  async getRecomendedWallets() {\n    const { explorerRecommendedWalletIds, explorerExcludedWalletIds } = ConfigCtrl.state\n\n    // Don't fetch recomended wallets\n    if (\n      explorerRecommendedWalletIds === 'NONE' ||\n      (explorerExcludedWalletIds === 'ALL' && !explorerRecommendedWalletIds)\n    ) {\n      return state.recomendedWallets\n    }\n\n    // Fetch only recomended wallets defined in config\n    if (CoreUtil.isArray(explorerRecommendedWalletIds)) {\n      const recommendedIds = explorerRecommendedWalletIds.join(',')\n      const params = { recommendedIds }\n      const { listings } = await ExplorerUtil.getAllListings(params)\n      const listingsArr = Object.values(listings)\n      listingsArr.sort((a, b) => {\n        const aIndex = explorerRecommendedWalletIds.indexOf(a.id)\n        const bIndex = explorerRecommendedWalletIds.indexOf(b.id)\n\n        return aIndex - bIndex\n      })\n      state.recomendedWallets = listingsArr\n    }\n\n    // Fetch default recomended wallets based on user's device, options and excluded config\n    else {\n      const isExcluded = CoreUtil.isArray(explorerExcludedWalletIds)\n      const params = {\n        page: 1,\n        entries: CoreUtil.RECOMMENDED_WALLET_AMOUNT,\n        version: 2,\n        excludedIds: isExcluded ? explorerExcludedWalletIds.join(',') : undefined\n      }\n      const { listings } = isMobile\n        ? await ExplorerUtil.getMobileListings(params)\n        : await ExplorerUtil.getDesktopListings(params)\n      state.recomendedWallets = Object.values(listings)\n    }\n\n    return state.recomendedWallets\n  },\n\n  async getWallets(params: ListingParams) {\n    const extendedParams: ListingParams = { ...params }\n    const { explorerRecommendedWalletIds, explorerExcludedWalletIds } = ConfigCtrl.state\n    const { recomendedWallets } = state\n\n    // Don't fetch any wallets if all are excluded\n    if (explorerExcludedWalletIds === 'ALL') {\n      return state.wallets\n    }\n\n    // Don't fetch recomended wallets, as we already have these\n    if (recomendedWallets.length) {\n      extendedParams.excludedIds = recomendedWallets.map(wallet => wallet.id).join(',')\n    } else if (CoreUtil.isArray(explorerRecommendedWalletIds)) {\n      extendedParams.excludedIds = explorerRecommendedWalletIds.join(',')\n    }\n\n    // Don't fetch user defined excluded wallets & recomended wallets\n    if (CoreUtil.isArray(explorerExcludedWalletIds)) {\n      extendedParams.excludedIds = [extendedParams.excludedIds, explorerExcludedWalletIds]\n        .filter(Boolean)\n        .join(',')\n    }\n\n    const { page, search } = params\n    const { listings: listingsObj, total } = isMobile\n      ? await ExplorerUtil.getMobileListings(extendedParams)\n      : await ExplorerUtil.getDesktopListings(extendedParams)\n    const listings = Object.values(listingsObj)\n    const type = search ? 'search' : 'wallets'\n    state[type] = {\n      listings: [...state[type].listings, ...listings],\n      total,\n      page: page ?? 1\n    }\n\n    return { listings, total }\n  },\n\n  async getInjectedWallets() {\n    const { listings: listingsObj } = await ExplorerUtil.getInjectedListings({})\n    const listings = Object.values(listingsObj)\n    state.injectedWallets = listings\n\n    return state.injectedWallets\n  },\n\n  getWalletImageUrl(imageId: string) {\n    return ExplorerUtil.getWalletImageUrl(imageId)\n  },\n\n  getAssetImageUrl(imageId: string) {\n    return ExplorerUtil.getAssetImageUrl(imageId)\n  },\n\n  resetSearch() {\n    state.search = { listings: [], total: 0, page: 1 }\n  }\n}\n", "import { proxy, subscribe as valtioSub } from 'valtio/vanilla'\nimport type { WcConnectionCtrlState } from '../types/controllerTypes'\n\n// -- initial state ------------------------------------------------ //\nconst state = proxy<WcConnectionCtrlState>({\n  pairingEnabled: false,\n  pairingUri: '',\n  pairingError: false\n})\n\n// -- controller --------------------------------------------------- //\nexport const WcConnectionCtrl = {\n  state,\n\n  subscribe(callback: (newState: WcConnectionCtrlState) => void) {\n    return valtioSub(state, () => callback(state))\n  },\n\n  setPairingUri(pairingUri: WcConnectionCtrlState['pairingUri']) {\n    state.pairingUri = pairingUri\n  },\n\n  setPairingError(pairingError: WcConnectionCtrlState['pairingError']) {\n    state.pairingError = pairingError\n  },\n\n  setPairingEnabled(pairingEnabled: WcConnectionCtrlState['pairingEnabled']) {\n    state.pairingEnabled = pairingEnabled\n  }\n}\n", "import { proxy, subscribe as valtioSub } from 'valtio/vanilla'\nimport type { ModalCtrlState } from '../types/controllerTypes'\nimport { AccountCtrl } from './AccountCtrl'\nimport { ClientCtrl } from './ClientCtrl'\nimport { ConfigCtrl } from './ConfigCtrl'\nimport { OptionsCtrl } from './OptionsCtrl'\nimport { RouterCtrl } from './RouterCtrl'\nimport { WcConnectionCtrl } from './WcConnectionCtrl'\n\n// -- types -------------------------------------------------------- //\nexport interface OpenOptions {\n  route?: 'Account' | 'ConnectWallet' | 'Help' | 'SelectNetwork'\n}\n\n// -- initial state ------------------------------------------------ //\nconst state = proxy<ModalCtrlState>({\n  open: false\n})\n\n// -- controller --------------------------------------------------- //\nexport const ModalCtrl = {\n  state,\n\n  subscribe(callback: (newState: ModalCtrlState) => void) {\n    return valtioSub(state, () => callback(state))\n  },\n\n  async open(options?: OpenOptions) {\n    return new Promise<void>(resolve => {\n      const { isUiLoaded, isDataLoaded, isPreferInjected, selectedChain } = OptionsCtrl.state\n      const { isConnected } = AccountCtrl.state\n      const { enableNetworkView } = ConfigCtrl.state\n      WcConnectionCtrl.setPairingEnabled(true)\n\n      if (options?.route) {\n        RouterCtrl.reset(options.route)\n      } else if (isConnected) {\n        RouterCtrl.reset('Account')\n      } else if (enableNetworkView) {\n        RouterCtrl.reset('SelectNetwork')\n      } else if (isPreferInjected) {\n        ClientCtrl.client()\n          .connectConnector('injected', selectedChain?.id)\n          .catch(err => console.error(err))\n        resolve()\n\n        return\n      } else {\n        RouterCtrl.reset('ConnectWallet')\n      }\n\n      const { pairingUri } = WcConnectionCtrl.state\n      // Open modal if essential async data is ready\n      if (isUiLoaded && isDataLoaded && (pairingUri || isConnected)) {\n        state.open = true\n        resolve()\n      }\n      // Otherwise (slow network) re-attempt open checks\n      else {\n        const interval = setInterval(() => {\n          const opts = OptionsCtrl.state\n          const connection = WcConnectionCtrl.state\n          if (opts.isUiLoaded && opts.isDataLoaded && (connection.pairingUri || isConnected)) {\n            clearInterval(interval)\n            state.open = true\n            resolve()\n          }\n        }, 200)\n      }\n    })\n  },\n\n  close() {\n    state.open = false\n  }\n}\n", "import { proxy, subscribe as valtioSub } from 'valtio/vanilla'\nimport type { ThemeCtrlState } from '../types/controllerTypes'\n\n// -- initial state ------------------------------------------------ //\nfunction isDarkMode() {\n  return typeof matchMedia !== 'undefined' && matchMedia('(prefers-color-scheme: dark)').matches\n}\n\nconst state = proxy<ThemeCtrlState>({\n  themeMode: isDarkMode() ? 'dark' : 'light'\n})\n\n// -- controller --------------------------------------------------- //\nexport const ThemeCtrl = {\n  state,\n\n  subscribe(callback: (newState: ThemeCtrlState) => void) {\n    return valtioSub(state, () => callback(state))\n  },\n\n  setThemeConfig(theme: ThemeCtrlState) {\n    const { themeMode, themeVariables } = theme\n\n    if (themeMode) {\n      state.themeMode = themeMode\n    }\n\n    if (themeVariables) {\n      state.themeVariables = { ...themeVariables }\n    }\n  }\n}\n", "import { proxy, subscribe as valtioSub } from 'valtio/vanilla'\nimport type { ToastCtrlState } from '../types/controllerTypes'\n\n// -- initial state ------------------------------------------------ //\nconst state = proxy<ToastCtrlState>({\n  open: false,\n  message: '',\n  variant: 'success'\n})\n\n// -- controller --------------------------------------------------- //\nexport const ToastCtrl = {\n  state,\n\n  subscribe(callback: (newState: ToastCtrlState) => void) {\n    return valtioSub(state, () => callback(state))\n  },\n\n  openToast(message: ToastCtrlState['message'], variant: ToastCtrlState['variant']) {\n    state.open = true\n    state.message = message\n    state.variant = variant\n  },\n\n  closeToast() {\n    state.open = false\n  }\n}\n", "/* eslint-disable @typescript-eslint/no-unnecessary-condition */\nimport { Buffer } from 'buffer'\n\nif (typeof window !== 'undefined') {\n  if (!window.Buffer) {\n    window.Buffer = Buffer\n  }\n  if (!window.global) {\n    window.global = window\n  }\n  if (!window.process) {\n    // @ts-expect-error minimal process\n    window.process = { env: {} }\n  }\n  if (!window.global) {\n    window.global = window\n  }\n}\n"],
  "mappings": ";;;;;;;;;;;;AAGA,IAAIA;AAAAA,IAGSC,IAAa,EACxB,gBAAgB,QAEhB,kBAAkBC,GAAmD;AACnEF,MAASE;AACX,GAEA,SAAS;AACP,MAAIF;AACF,WAAOA;AAGT,QAAM,IAAI,MAAM,8BAA8B;AAChD,EACF;AAjBIA,ICCEG,IAAQC,MAAuB,EACnC,SAAS,CAAC,eAAe,GACzB,MAAM,iBACN,MAAM,OACR,CAAC;ADLGJ,ICQSK,IAAa,EACxB,OAAAF,GAEA,UAAUG,GAA+C;AACvD,SAAOC,UAAUJ,GAAO,MAAMG,EAASH,CAAK,CAAC;AAC/C,GAEA,KAAKK,GAA+BC,GAAgC;AAC9DD,QAASL,EAAM,SACjBA,EAAM,OAAOK,GACTC,MACFN,EAAM,OAAOM,IAEfN,EAAM,QAAQ,KAAKK,CAAI;AAE3B,GAEA,MAAMA,GAA+B;AACnCL,IAAM,OAAOK,GACbL,EAAM,UAAU,CAACK,CAAI;AACvB,GAEA,QAAQA,GAA+B;AACjCL,IAAM,QAAQ,SAAS,MACzBA,EAAM,QAAQA,EAAM,QAAQ,SAAS,CAAC,IAAIK,GAC1CL,EAAM,OAAOK;AAEjB,GAEA,SAAS;AACP,MAAIL,EAAM,QAAQ,SAAS,GAAG;AAC5BA,MAAM,QAAQ,IACd;AAAA,UAAM,CAACO,CAAI,IAAIP,EAAM,QAAQ,MAAM,EAAE;AACrCA,MAAM,OAAOO;EAAAA;AAEjB,GAEA,QAAQD,GAA+B;AACrCN,IAAM,OAAOM;AACf,EACF;ADhDIT,IEDSW,IAAW,EACtB,+BAA+B,iCAE/B,aAAa,eAEb,8BAA8B,qBAE9B,2BAA2B,GAE3B,WAAW;AACT,SAAI,OAAO,SAAW,MACb,QACL,OAAO,WAAW,kBAAkB,EAAE,WACpC,wDAAwD,KAAK,UAAU,SAAS,CACpF,IAGK;AACT,GAEA,YAAY;AACV,SAAOA,EAAS,SAAS,KAAK,UAAU,UAAU,YAAA,EAAc,SAAS,SAAS;AACpF,GAEA,QAAQ;AACN,QAAMC,IAAK,UAAU,UAAU,YAAY;AAE3C,SAAOD,EAAS,SAAA,MAAeC,EAAG,SAAS,QAAQ,KAAKA,EAAG,SAAS,MAAM;AAC5E,GAEA,UAAUC,GAAa;AACrB,SAAOA,EAAI,WAAW,SAAS,KAAKA,EAAI,WAAW,UAAU;AAC/D,GAEA,QAAWJ,GAA6B;AACtC,SAAO,MAAM,QAAQA,CAAI,KAAKA,EAAK,SAAS;AAC9C,GAEA,gBAAgBK,GAAgBC,GAAeC,GAAsB;AACnE,MAAIL,EAAS,UAAUG,CAAM;AAC3B,WAAO,KAAK,mBAAmBA,GAAQC,GAAOC,CAAI;AAEpD,MAAIC,IAAaH;AACZG,IAAW,SAAS,KAAK,MAC5BA,IAAaH,EAAO,WAAW,KAAK,EAAE,EAAE,WAAW,KAAK,EAAE,GAC1DG,IAAa,GAAGA,SAEbA,EAAW,SAAS,GAAG,MAC1BA,IAAa,GAAGA,OAElB,KAAK,yBAAyBA,GAAYD,CAAI;AAC9C,QAAME,IAAe,mBAAmBH,CAAK;AAE7C,SAAO,GAAGE,WAAoBC;AAChC,GAEA,mBAAmBJ,GAAgBC,GAAeC,GAAsB;AACtE,MAAI,CAACL,EAAS,UAAUG,CAAM;AAC5B,WAAO,KAAK,gBAAgBA,GAAQC,GAAOC,CAAI;AAEjD,MAAIC,IAAaH;AACZG,IAAW,SAAS,GAAG,MAC1BA,IAAa,GAAGA,OAElB,KAAK,yBAAyBA,GAAYD,CAAI;AAC9C,QAAME,IAAe,mBAAmBH,CAAK;AAE7C,SAAO,GAAGE,WAAoBC;AAChC,GAEA,MAAM,KAAKC,GAAqB;AAC9B,SAAO,IAAI,QAAQC,OAAW;AAC5B,eAAWA,GAASD,CAAW;EACjC,CAAC;AACH,GAEA,SAASE,GAAcC,GAA4B;AACjD,SAAO,KAAKD,GAAMC,GAAQ,qBAAqB;AACjD,GAEA,yBAAyBD,GAAcL,GAAc;AACnD,MAAI;AACF,iBAAa,QAAQL,EAAS,+BAA+B,KAAK,UAAU,EAAE,MAAAU,GAAM,MAAAL,EAAK,CAAC,CAAC;EAC7F,QAAA;AACE,YAAQ,KAAK,uCAAuC;EACtD;AACF,GAEA,gCAAgCD,GAAe;AAC7C,MAAI;AACF,UAAM,CAACM,CAAI,IAAIN,EAAM,MAAM,GAAG;AAC9B,iBAAa,QACXJ,EAAS,+BACT,KAAK,UAAU,EAAE,MAAAU,GAAM,MAAM,UAAU,CAAC,CAC1C;EACF,QAAA;AACE,YAAQ,KAAK,+CAA+C;EAC9D;AACF,GAEA,8BAA8B;AAC5B,MAAI;AACF,iBAAa,WAAWV,EAAS,6BAA6B;EAChE,QAAA;AACE,YAAQ,KAAK,0CAA0C;EACzD;AACF,GAEA,+BAA+B;AAC7B,MAAI;AACE,WAAO,eAAiB,OAC1B,aAAa,QAAQA,EAAS,aAAa,OAA2C;EAE1F,QAAA;AACE,YAAQ,KAAK,4CAA4C;EAC3D;AACF,GAEA,sBAAsB;AAxHxB,MAAAY;AAyHI,QAAMC,KAAaD,IAAAlB,EAAW,MAAM,SAAjB,OAAAkB,SAAAA,EAAuB;AAC1C,MAAI,CAACC;AACH,UAAM,IAAI,MAAM,4BAA4B;AAG9C,SAAOA;AACT,GAEA,6BAA6B;AAjI/B,MAAAD;AAkII,QAAMC,KAAaD,IAAAlB,EAAW,MAAM,SAAjB,OAAA,SAAAkB,EAAuB;AAC1C,MAAI,CAACC;AACH,UAAM,IAAI,MAAM,mCAAmC;AAGrD,SAAOA;AACT,GAEA,uBAAuB;AACrB,SAAI,OAAO,WAAa,MACF,IAAI,gBAAgB,SAAS,MAAM,EAEpC,IAAIb,EAAS,4BAA4B,IAGvD;AACT,EACF;AFhJIX,IGCEyB,IACJ,OAAO,WAAa,QACnB,SAAS,SAAS,SAAS,WAAW,KAAK,SAAS,SAAS,SAAS,OAAO;AHH5EzB,IGMEG,IAAQC,MAAuB,EACnC,SAASqB,GACT,eAAe,IACf,QAAQ,CAAA,GACR,mBAAmB,OACrB,CAAC;AHXGzB,IGcS0B,IAAa,EACxB,OAAAvB,GAEA,UAAUG,GAA0C;AAClD,SAAOC,UAAUJ,EAAM,QAAQ,MAAMG,EAASqB,SAASxB,EAAM,OAAOA,EAAM,OAAO,SAAS,CAAC,CAAC,CAAC,CAAC;AAChG,GAEA,aAAa;AACPA,IAAM,WAAW,QAAO,UAAQ,OAAA,SAAA,OAAA,cAAe,QACjDA,EAAM,gBAAgB,OAAO,WAAA;AAEjC,GAEA,qBAAqByB,GAAyD;AAC5EzB,IAAM,oBAAoByB;AAC5B,GAEA,MAAMnB,GAAsB;AAC1B,MAAIN,EAAM,SAAS;AACjB,UAAM0B,IAAQ,EACZ,MAAM,SACN,MAAMpB,EAAK,MACX,eAAeN,EAAM,eACrB,WAAW,KAAK,IAChB,GAAA,MAAAM,EACF;AACAN,MAAM,OAAO,KAAK0B,CAAK;EAAA;AAE3B,GAEA,MAAMpB,GAAsB;AAC1B,MAAIN,EAAM,SAAS;AACjB,UAAM0B,IAAQ,EACZ,MAAM,SACN,MAAMpB,EAAK,MACX,eAAeN,EAAM,eACrB,WAAW,KAAK,IAChB,GAAA,MAAAM,EACF;AACAN,MAAM,OAAO,KAAK0B,CAAK;EAAA;AAE3B,GAEA,KAAKpB,GAAsB;AACzB,MAAIN,EAAM,SAAS;AACjB,UAAM0B,IAAQ,EACZ,MAAM,QACN,MAAMpB,EAAK,MACX,eAAeN,EAAM,eACrB,WAAW,KAAK,IAAA,GAChB,MAAAM,EACF;AACAN,MAAM,OAAO,KAAK0B,CAAK;EAAA;AAE3B,EACF;AHrEI7B,IIEEG,IAAQC,MAAwB,EACpC,eAAe,QACf,QAAQ,QACR,iBAAiB,OACjB,gBAAgB,OAChB,cAAc,OACd,YAAY,OACZ,kBAAkB,MACpB,CAAC;AJVGJ,IIaS8B,IAAc,EACzB,OAAA3B,GAEA,UAAUG,GAAgD;AACxD,SAAOC,UAAUJ,GAAO,MAAMG,EAASH,CAAK,CAAC;AAC/C,GAEA,UAAU4B,GAAqC;AAC7C5B,IAAM,SAAS4B;AACjB,GAEA,mBAAmB;AACjB,QAAMC,IAAgB/B,EAAW,OAAA,EAAS,WAAA,EAAa;AACvD,SAAI+B,MACF7B,EAAM,gBAAgB6B,IAGjB7B,EAAM;AACf,GAEA,iBAAiB6B,GAAkD;AACjE7B,IAAM,gBAAgB6B;AACxB,GAEA,mBAAmBC,GAAsD;AACvE9B,IAAM,kBAAkB8B;AAC1B,GAEA,kBAAkBC,GAAoD;AACpE/B,IAAM,iBAAiB+B;AACzB,GAEA,gBAAgBC,GAAgD;AAC9DhC,IAAM,eAAegC;AACvB,GAEA,cAAcC,GAA4C;AACxDjC,IAAM,aAAaiC;AACrB,GAEA,oBAAoBC,GAAwD;AAC1ElC,IAAM,mBAAmBkC;AAC3B,EACF;AJxDIrC,IKIEG,IAAQC,MAAuB,EACnC,WAAW,IACX,eAAe,QACf,gBAAgB,QAChB,cAAc,QACd,aAAa,QACb,aAAa,QACb,gBAAgB,QAChB,mBAAmB,OACnB,mBAAmB,MACnB,gBAAgB,MAChB,cAAc,QACd,2BAA2B,QAC3B,8BAA8B,QAC9B,mBAAmB,QACnB,kBAAkB,OACpB,CAAC;ALpBGJ,IKuBSsC,IAAa,EACxB,OAAAnC,GAEA,UAAUG,GAA+C;AACvD,SAAOC,UAAUJ,GAAO,MAAMG,EAASH,CAAK,CAAC;AAC/C,GAEA,UAAUoC,GAAyB;AAjCrC,MAAAhB,GAAAiB;AAkCId,IAAW,WAAA,GACXI,EAAY,kBAAkB,SAAQP,IAAAgB,EAAO,kBAAP,OAAA,SAAAhB,EAAsB,MAAM,CAAC,GACnEO,EAAY,mBAAmB,SAAQU,IAAAD,EAAO,mBAAP,OAAA,SAAAC,EAAuB,MAAM,CAAC,GACrEV,EAAY,UAAU7B,EAAW,OAAA,EAAS,MAAM,GAChD6B,EAAY,oBACV7B,EAAW,OAAO,EAAE,4BAA4B,KAAKU,EAAS,qBAChE,CAAA,GAEI4B,EAAO,gBACTT,EAAY,iBAAiBS,EAAO,YAAY,GAGlD5B,EAAS,6BAA6B,GAEtC,OAAO,OAAOR,GAAOoC,CAAM;AAC7B,EACF;AL/CIvC,IMIEG,IAAQC,MAAwB,EACpC,SAAS,QACT,aAAa,QACb,eAAe,QACf,gBAAgB,OAChB,gBAAgB,OAChB,SAAS,QACT,aAAa,MACf,CAAC;ANZGJ,IMeSyC,IAAc,EACzB,OAAAtC,GAEA,UAAUG,GAAgD;AACxD,SAAOC,UAAUJ,GAAO,MAAMG,EAASH,CAAK,CAAC;AAC/C,GAEA,aAAa;AACX,QAAMuC,IAAUzC,EAAW,OAAO,EAAE,WAAW;AAC/CE,IAAM,UAAUuC,EAAQ,SACxBvC,EAAM,cAAcuC,EAAQ;AAC9B,GAEA,MAAM,aACJC,GACAC,GACA;AAlCJ,MAAArB;AAmCI,MAAI;AACFpB,MAAM,iBAAiB;AACvB,UAAM0C,IAAUD,KAAkBzC,EAAM,SAClC2C,KAAsBvB,IAAAO,EAAY,MAAM,WAAlB,OAAA,SAAAP,EAA0B,KAAKwB,OAASA,EAAM,OAAO,CACjF;AAAA,QAAIF,KAAWC,GAAqB;AAClC,YAAM9B,IAAO,MAAMf,EAAW,OAAS,EAAA,aAAa,EAAE,SAAA4C,GAAS,SAAS,EAAE,CAAC;AAC3E,UAAI7B,GAAM;AACR,cAAMgC,IAAS,MAAM/C,EAAW,OAAA,EAAS,eAAe,EAAE,MAAAe,GAAM,SAAS,EAAE,CAAC;AACxEgC,aACF,MAAML,EAAgBK,CAAM,GAE9B7C,EAAM,gBAAgB6C;MAAAA;AAExB7C,QAAM,cAAca;IAAAA;EAExB,UAAA;AACEb,MAAM,iBAAiB;EACzB;AACF,GAEA,MAAM,aAAa8C,GAAgC;AACjD,MAAI;AACF,UAAM,EAAE,OAAAF,EAAM,IAAI9C,EAAW,OAAO,EAAE,WAAW,GAC3C,EAAE,gBAAAiD,EAAe,IAAIZ,EAAW;AACtC,QAAIa;AACAJ,SAASG,MACXC,IAAQD,EAAeH,EAAM,EAAE,IAEjC5C,EAAM,iBAAiB;AACvB,UAAM0C,IAAUI,KAAkB9C,EAAM;AACxC,QAAI0C,GAAS;AACX,YAAMO,IAAU,MAAMnD,EAAW,OAAO,EAAE,aAAa,EAAE,SAAA4C,GAAS,OAAAM,EAAM,CAAC;AACzEhD,QAAM,UAAU,EAAE,QAAQiD,EAAQ,WAAW,QAAQA,EAAQ,OAAO;IAAA;EAExE,UAAA;AACEjD,MAAM,iBAAiB;EACzB;AACF,GAEA,WAAW0C,GAAsC;AAC/C1C,IAAM,UAAU0C;AAClB,GAEA,eAAeQ,GAA8C;AAC3DlD,IAAM,cAAckD;AACtB,GAEA,eAAe;AACblD,IAAM,UAAU;AAClB,GAEA,eAAe;AACbA,IAAM,UAAU,QAChBA,EAAM,cAAc,OACpBA,EAAM,cAAc,QACpBA,EAAM,gBAAgB,QACtBA,EAAM,UAAU;AAClB,EACF;AN1FIH,IOCEsD,IAAU;AAEhB,eAAeC,EAAcC,GAAkBC,GAAuB;AACpE,QAAM5C,IAAM,IAAI,IAAI2C,GAAUF,CAAO;AACrC,SAAAzC,EAAI,aAAa,OAAO,aAAayB,EAAW,MAAM,SAAS,GAC/D,OAAO,QAAQmB,CAAM,EAAE,QAAQ,CAAC,CAACC,GAAKC,CAAK,MAAM;AAC3CA,SACF9C,EAAI,aAAa,OAAO6C,GAAK,OAAOC,CAAK,CAAC;EAE9C,CAAC,IACe,MAAM,MAAM9C,CAAG,GAEhB,KAAA;AACjB;AAGa,IAAA+C,IAAe,EAC1B,MAAM,mBAAmBH,GAAuB;AAC9C,SAAOF,EAAc,8BAA8BE,CAAM;AAC3D,GAEA,MAAM,kBAAkBA,GAAuB;AAC7C,SAAOF,EAAc,6BAA6BE,CAAM;AAC1D,GAEA,MAAM,oBAAoBA,GAAuB;AAC/C,SAAOF,EAAc,+BAA+BE,CAAM;AAC5D,GAEA,MAAM,eAAeA,GAAuB;AAC1C,SAAOF,EAAc,0BAA0BE,CAAM;AACvD,GAEA,kBAAkBI,GAAiB;AACjC,SAAO,GAAGP,2BAAiCO,eAAqBvB,EAAW,MAAM;AACnF,GAEA,iBAAiBuB,GAAiB;AAChC,SAAO,GAAGP,0BAAgCO,eAAqBvB,EAAW,MAAM;AAClF,EACF;AC5CA,IAAAwB,IAAA,OAAA;AAAA,IAAAC,IAAA,OAAA;AAAA,IAAAC,IAAA,OAAA,UAAA;AAAA,IAAAC,IAAA,OAAA,UAAA;AAAA,IAAAC,IAAA,CAAA,GAAA,GAAAC,MAAA,KAAA,IAAAL,EAAA,GAAA,GAAA,EAAA,YAAA,MAAA,cAAA,MAAA,UAAA,MAAA,OAAAK,EAAA,CAAA,IAAA,EAAA,CAAA,IAAAA;AAAA,IAAAC,IAAA,CAAA,GAAA,MAAA;AAAA,WAAAD,KAAA,MAAA,IAAA,CAAA;AAAAH,MAAA,KAAA,GAAAG,CAAA,KAAAD,EAAA,GAAAC,GAAA,EAAAA,CAAA,CAAA;AAAA,MAAAJ;AAAA,aAAAI,KAAAJ,EAAA,CAAA;AAAAE,QAAA,KAAA,GAAAE,CAAA,KAAAD,EAAA,GAAAC,GAAA,EAAAA,CAAA,CAAA;AAAA,SAAA;AAAA;AAMA,IAAME,IAAW1D,EAAS,SAGpBR;AAHN,IAGMA,IAAQC,MAAyB,EACrC,SAAS,EAAE,UAAU,CAAA,GAAI,OAAO,GAAG,MAAM,EAAE,GAC3C,iBAAiB,CAAA,GACjB,QAAQ,EAAE,UAAU,CAAI,GAAA,OAAO,GAAG,MAAM,EAAE,GAC1C,mBAAmB,CAAA,EACrB,CAAC;AARD,IAWakE,KAAe,EAC1B,OAAAnE,GAEA,MAAM,uBAAuB;AAC3B,QAAM,EAAE,8BAAAoE,GAA8B,2BAAAC,EAA0B,IAAIlC,EAAW;AAG/E,MACEiC,MAAiC,UAChCC,MAA8B,SAAS,CAACD;AAEzC,WAAOpE,EAAM;AAIf,MAAIQ,EAAS,QAAQ4D,CAA4B,GAAG;AAElD,UAAMd,IAAS,EAAE,gBADMc,EAA6B,KAAK,GAAG,EAC5B,GAC1B,EAAE,UAAAE,EAAS,IAAI,MAAMb,EAAa,eAAeH,CAAM,GACvDiB,IAAc,OAAO,OAAOD,CAAQ;AAC1CC,MAAY,KAAK,CAACC,GAAGC,MAAM;AACzB,YAAMC,IAASN,EAA6B,QAAQI,EAAE,EAAE,GAClDG,IAASP,EAA6B,QAAQK,EAAE,EAAE;AAExD,aAAOC,IAASC;IAClB,CAAC,GACD3E,EAAM,oBAAoBuE;EAAAA,OAIvB;AACH,UAAMK,IAAapE,EAAS,QAAQ6D,CAAyB,GACvDf,IAAS,EACb,MAAM,GACN,SAAS9C,EAAS,2BAClB,SAAS,GACT,aAAaoE,IAAaP,EAA0B,KAAK,GAAG,IAAI,OAClE,GACM,EAAE,UAAAC,EAAS,IAAIJ,IACjB,MAAMT,EAAa,kBAAkBH,CAAM,IAC3C,MAAMG,EAAa,mBAAmBH,CAAM;AAChDtD,MAAM,oBAAoB,OAAO,OAAOsE,CAAQ;EAAA;AAGlD,SAAOtE,EAAM;AACf,GAEA,MAAM,WAAWsD,GAAuB;AACtC,QAAMuB,IAAgCC,EAAA,CAAA,GAAKxB,CAAAA,GACrC,EAAE,8BAAAc,GAA8B,2BAAAC,EAA0B,IAAIlC,EAAW,OACzE,EAAE,mBAAA4C,EAAkB,IAAI/E;AAG9B,MAAIqE,MAA8B;AAChC,WAAOrE,EAAM;AAIX+E,IAAkB,SACpBF,EAAe,cAAcE,EAAkB,IAAIC,OAAUA,EAAO,EAAE,EAAE,KAAK,GAAG,IACvExE,EAAS,QAAQ4D,CAA4B,MACtDS,EAAe,cAAcT,EAA6B,KAAK,GAAG,IAIhE5D,EAAS,QAAQ6D,CAAyB,MAC5CQ,EAAe,cAAc,CAACA,EAAe,aAAaR,CAAyB,EAChF,OAAO,OAAO,EACd,KAAK,GAAG;AAGb,QAAM,EAAE,MAAAY,GAAM,QAAAC,EAAO,IAAI5B,GACnB,EAAE,UAAU6B,GAAa,OAAAC,EAAM,IAAIlB,IACrC,MAAMT,EAAa,kBAAkBoB,CAAc,IACnD,MAAMpB,EAAa,mBAAmBoB,CAAc,GAClDP,IAAW,OAAO,OAAOa,CAAW,GACpCE,IAAOH,IAAS,WAAW;AACjC,SAAAlF,EAAMqF,CAAI,IAAI,EACZ,UAAU,CAAC,GAAGrF,EAAMqF,CAAI,EAAE,UAAU,GAAGf,CAAQ,GAC/C,OAAAc,GACA,MAAMH,KAAQ,EAChB,GAEO,EAAE,UAAAX,GAAU,OAAAc,EAAM;AAC3B,GAEA,MAAM,qBAAqB;AACzB,QAAM,EAAE,UAAUD,EAAY,IAAI,MAAM1B,EAAa,oBAAoB,CAAA,CAAE,GACrEa,IAAW,OAAO,OAAOa,CAAW;AAC1C,SAAAnF,EAAM,kBAAkBsE,GAEjBtE,EAAM;AACf,GAEA,kBAAkB0D,GAAiB;AACjC,SAAOD,EAAa,kBAAkBC,CAAO;AAC/C,GAEA,iBAAiBA,GAAiB;AAChC,SAAOD,EAAa,iBAAiBC,CAAO;AAC9C,GAEA,cAAc;AACZ1D,IAAM,SAAS,EAAE,UAAU,CAAA,GAAI,OAAO,GAAG,MAAM,EAAE;AACnD,EACF;AApHA,ICFMA,IAAQC,MAA6B,EACzC,gBAAgB,OAChB,YAAY,IACZ,cAAc,MAChB,CAAC;ADFD,ICKaqF,IAAmB,EAC9B,OAAAtF,GAEA,UAAUG,GAAqD;AAC7D,SAAOC,UAAUJ,GAAO,MAAMG,EAASH,CAAK,CAAC;AAC/C,GAEA,cAAcuF,GAAiD;AAC7DvF,IAAM,aAAauF;AACrB,GAEA,gBAAgBC,GAAqD;AACnExF,IAAM,eAAewF;AACvB,GAEA,kBAAkBC,GAAyD;AACzEzF,IAAM,iBAAiByF;AACzB,EACF;ADvBA,IESMzF,IAAQC,MAAsB,EAClC,MAAM,MACR,CAAC;AFXD,IEcayF,KAAY,EACvB,OAAA1F,GAEA,UAAUG,GAA8C;AACtD,SAAOC,UAAUJ,GAAO,MAAMG,EAASH,CAAK,CAAC;AAC/C,GAEA,MAAM,KAAK2F,GAAuB;AAChC,SAAO,IAAI,QAAc1E,OAAW;AAClC,UAAM,EAAE,YAAAgB,GAAY,cAAAD,GAAc,kBAAAE,GAAkB,eAAAL,EAAc,IAAIF,EAAY,OAC5E,EAAE,aAAAuB,EAAY,IAAIZ,EAAY,OAC9B,EAAE,mBAAAsD,EAAkB,IAAIzD,EAAW;AAGzC,QAFAmD,EAAiB,kBAAkB,IAAI,GAEnCK,KAAA,QAAAA,EAAS;AACXzF,QAAW,MAAMyF,EAAQ,KAAK;aACrBzC;AACThD,QAAW,MAAM,SAAS;aACjB0F;AACT1F,QAAW,MAAM,eAAe;aACvBgC,GAAkB;AAC3BpC,QAAW,OAAA,EACR,iBAAiB,YAAY+B,uBAAe,EAAE,EAC9C,MAAMgE,OAAO,QAAQ,MAAMA,CAAG,CAAC,GAClC5E,EAAAA;AAEA;IAAA;AAEAf,QAAW,MAAM,eAAe;AAGlC,UAAM,EAAE,YAAAqF,EAAW,IAAID,EAAiB;AAExC,QAAIrD,KAAcD,MAAiBuD,KAAcrC;AAC/ClD,QAAM,OAAO,MACbiB,EAAQ;SAGL;AACH,YAAM6E,IAAW,YAAY,MAAM;AACjC,cAAMC,IAAOpE,EAAY,OACnBqE,IAAaV,EAAiB;AAChCS,UAAK,cAAcA,EAAK,iBAAiBC,EAAW,cAAc9C,OACpE,cAAc4C,CAAQ,GACtB9F,EAAM,OAAO,MACbiB,EAAAA;MAEJ,GAAG,GAAG;IAAA;EAEV,CAAC;AACH,GAEA,QAAQ;AACNjB,IAAM,OAAO;AACf,EACF;AC3EA,IAAAiG,IAAA,OAAA;AAAA,IAAAzB,IAAA,OAAA;AAAA,IAAA0B,IAAA,OAAA,UAAA;AAAA,IAAAC,IAAA,OAAA,UAAA;AAAA,IAAAC,IAAA,CAAAC,GAAAC,GAAAC,MAAAD,KAAAD,IAAAJ,EAAAI,GAAAC,GAAA,EAAA,YAAA,MAAA,cAAA,MAAA,UAAA,MAAA,OAAAC,EAAA,CAAA,IAAAF,EAAAC,CAAA,IAAAC;AAAA,IAAAvC,IAAA,CAAAqC,GAAAC,MAAA;AAAA,WAAAC,KAAAD,MAAAA,IAAA,CAAA;AAAAJ,MAAA,KAAAI,GAAAC,CAAA,KAAAH,EAAAC,GAAAE,GAAAD,EAAAC,CAAA,CAAA;AAAA,MAAA/B;AAAA,aAAA+B,KAAA/B,EAAA8B,CAAA;AAAAH,QAAA,KAAAG,GAAAC,CAAA,KAAAH,EAAAC,GAAAE,GAAAD,EAAAC,CAAA,CAAA;AAAA,SAAAF;AAAA;AAIA,SAASG,IAAa;AACpB,SAAO,OAAO,aAAe,OAAe,WAAW,8BAA8B,EAAE;AACzF;AAEA,IAAMxG,IAAQC,MAAsB,EAClC,WAAWuG,EAAW,IAAI,SAAS,QACrC,CAAC;AAFD,IAKaC,KAAY,EACvB,OAAAzG,GAEA,UAAUG,GAA8C;AACtD,SAAOC,UAAUJ,GAAO,MAAMG,EAASH,CAAK,CAAC;AAC/C,GAEA,eAAe0G,GAAuB;AACpC,QAAM,EAAE,WAAAC,GAAW,gBAAAC,EAAe,IAAIF;AAElCC,QACF3G,EAAM,YAAY2G,IAGhBC,MACF5G,EAAM,iBAAiB8E,EAAA,CAAA,GAAK8B,CAAAA;AAEhC,EACF;AAvBA,ICJM5G,IAAQC,MAAsB,EAClC,MAAM,OACN,SAAS,IACT,SAAS,UACX,CAAC;ADAD,ICGa4G,KAAY,EACvB,OAAA7G,GAEA,UAAUG,GAA8C;AACtD,SAAOC,UAAUJ,GAAO,MAAMG,EAASH,CAAK,CAAC;AAC/C,GAEA,UAAU8G,GAAoCC,GAAoC;AAChF/G,IAAM,OAAO,MACbA,EAAM,UAAU8G,GAChB9G,EAAM,UAAU+G;AAClB,GAEA,aAAa;AACX/G,IAAM,OAAO;AACf,EACF;ACxBI,OAAO,SAAW,QACf,OAAO,WACV,OAAO,SAASgH,cAAAA,SAEb,OAAO,WACV,OAAO,SAAS,SAEb,OAAO,YAEV,OAAO,UAAU,EAAE,KAAK,CAAG,EAAA,IAExB,OAAO,WACV,OAAO,SAAS;",
  "names": ["client", "ClientCtrl", "ethereumClient", "state", "proxy", "RouterCtrl", "callback", "valtioSub", "view", "data", "last", "CoreUtil", "ua", "url", "appUrl", "wcUri", "name", "safeAppUrl", "encodedWcUrl", "miliseconds", "resolve", "href", "target", "_a", "routerData", "isEnabled", "EventsCtrl", "snapshot", "connectedWalletId", "event", "OptionsCtrl", "chains", "selectedChain", "isCustomDesktop", "isCustomMobile", "isDataLoaded", "isUiLoaded", "isPreferInjected", "ConfigCtrl", "config", "_b", "AccountCtrl", "account", "preloadAvatarFn", "profileAddress", "address", "isMainnetConfigured", "chain", "avatar", "balanceAddress", "tokenContracts", "token", "balance", "isConnected", "W3M_API", "fetchListings", "endpoint", "params", "key", "value", "ExplorerUtil", "imageId", "L", "x", "y", "A", "u", "s", "I", "isMobile", "ExplorerCtrl", "explorerRecommendedWalletIds", "explorerExcludedWalletIds", "listings", "listingsArr", "a", "b", "aIndex", "bIndex", "isExcluded", "extendedParams", "__spreadValues", "recomendedWallets", "wallet", "page", "search", "listingsObj", "total", "type", "WcConnectionCtrl", "pairingUri", "pairingError", "pairingEnabled", "ModalCtrl", "options", "enableNetworkView", "err", "interval", "opts", "connection", "i", "h", "c", "m", "r", "e", "t", "isDarkMode", "ThemeCtrl", "theme", "themeMode", "themeVariables", "ToastCtrl", "message", "variant", "Buffer"]
}
