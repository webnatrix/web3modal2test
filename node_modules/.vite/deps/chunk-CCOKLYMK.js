import {
  proxy,
  require_buffer,
  snapshot,
  subscribe
} from "./chunk-I5NJBMNF.js";
import {
  __toESM
} from "./chunk-JZQ37OGZ.js";

// node_modules/@walletconnect/modal-core/dist/index.js
var import_buffer = __toESM(require_buffer());
var n = proxy({ history: ["ConnectWallet"], view: "ConnectWallet", data: void 0 });
var N = { state: n, subscribe(e) {
  return subscribe(n, () => e(n));
}, push(e, t) {
  e !== n.view && (n.view = e, t && (n.data = t), n.history.push(e));
}, reset(e) {
  n.view = e, n.history = [e];
}, replace(e) {
  n.history.length > 1 && (n.history[n.history.length - 1] = e, n.view = e);
}, goBack() {
  if (n.history.length > 1) {
    n.history.pop();
    const [e] = n.history.slice(-1);
    n.view = e;
  }
}, setData(e) {
  n.data = e;
} };
var i = { WALLETCONNECT_DEEPLINK_CHOICE: "WALLETCONNECT_DEEPLINK_CHOICE", WCM_VERSION: "WCM_VERSION", RECOMMENDED_WALLET_AMOUNT: 9, isMobile() {
  return typeof window < "u" ? Boolean(window.matchMedia("(pointer:coarse)").matches || /Android|webOS|iPhone|iPad|iPod|BlackBerry|Opera Mini/u.test(navigator.userAgent)) : false;
}, isAndroid() {
  return i.isMobile() && navigator.userAgent.toLowerCase().includes("android");
}, isIos() {
  const e = navigator.userAgent.toLowerCase();
  return i.isMobile() && (e.includes("iphone") || e.includes("ipad"));
}, isHttpUrl(e) {
  return e.startsWith("http://") || e.startsWith("https://");
}, isArray(e) {
  return Array.isArray(e) && e.length > 0;
}, formatNativeUrl(e, t, s) {
  if (i.isHttpUrl(e))
    return this.formatUniversalUrl(e, t, s);
  let o = e;
  o.includes("://") || (o = e.replaceAll("/", "").replaceAll(":", ""), o = `${o}://`), o.endsWith("/") || (o = `${o}/`), this.setWalletConnectDeepLink(o, s);
  const r = encodeURIComponent(t);
  return `${o}wc?uri=${r}`;
}, formatUniversalUrl(e, t, s) {
  if (!i.isHttpUrl(e))
    return this.formatNativeUrl(e, t, s);
  let o = e;
  o.endsWith("/") || (o = `${o}/`), this.setWalletConnectDeepLink(o, s);
  const r = encodeURIComponent(t);
  return `${o}wc?uri=${r}`;
}, async wait(e) {
  return new Promise((t) => {
    setTimeout(t, e);
  });
}, openHref(e, t) {
  window.open(e, t, "noreferrer noopener");
}, setWalletConnectDeepLink(e, t) {
  localStorage.setItem(i.WALLETCONNECT_DEEPLINK_CHOICE, JSON.stringify({ href: e, name: t }));
}, setWalletConnectAndroidDeepLink(e) {
  const [t] = e.split("?");
  localStorage.setItem(i.WALLETCONNECT_DEEPLINK_CHOICE, JSON.stringify({ href: t, name: "Android" }));
}, removeWalletConnectDeepLink() {
  localStorage.removeItem(i.WALLETCONNECT_DEEPLINK_CHOICE);
}, setModalVersionInStorage() {
  typeof localStorage < "u" && localStorage.setItem(i.WCM_VERSION, "2.5.4");
}, getWalletRouterData() {
  var e;
  const t = (e = N.state.data) == null ? void 0 : e.Wallet;
  if (!t)
    throw new Error('Missing "Wallet" view data');
  return t;
} };
var T = typeof location < "u" && (location.hostname.includes("localhost") || location.protocol.includes("https"));
var a = proxy({ enabled: T, userSessionId: "", events: [], connectedWalletId: void 0 });
var $ = { state: a, subscribe(e) {
  return subscribe(a.events, () => e(snapshot(a.events[a.events.length - 1])));
}, initialize() {
  a.enabled && typeof (crypto == null ? void 0 : crypto.randomUUID) < "u" && (a.userSessionId = crypto.randomUUID());
}, setConnectedWalletId(e) {
  a.connectedWalletId = e;
}, click(e) {
  if (a.enabled) {
    const t = { type: "CLICK", name: e.name, userSessionId: a.userSessionId, timestamp: Date.now(), data: e };
    a.events.push(t);
  }
}, track(e) {
  if (a.enabled) {
    const t = { type: "TRACK", name: e.name, userSessionId: a.userSessionId, timestamp: Date.now(), data: e };
    a.events.push(t);
  }
}, view(e) {
  if (a.enabled) {
    const t = { type: "VIEW", name: e.name, userSessionId: a.userSessionId, timestamp: Date.now(), data: e };
    a.events.push(t);
  }
} };
var l = proxy({ chains: void 0, walletConnectUri: void 0, isAuth: false, isCustomDesktop: false, isCustomMobile: false, isDataLoaded: false, isUiLoaded: false });
var c = { state: l, subscribe(e) {
  return subscribe(l, () => e(l));
}, setChains(e) {
  l.chains = e;
}, setWalletConnectUri(e) {
  l.walletConnectUri = e;
}, setIsCustomDesktop(e) {
  l.isCustomDesktop = e;
}, setIsCustomMobile(e) {
  l.isCustomMobile = e;
}, setIsDataLoaded(e) {
  l.isDataLoaded = e;
}, setIsUiLoaded(e) {
  l.isUiLoaded = e;
}, setIsAuth(e) {
  l.isAuth = e;
} };
var y = proxy({ projectId: "", mobileWallets: void 0, desktopWallets: void 0, walletImages: void 0, chains: void 0, enableAuthMode: false, enableExplorer: true, explorerExcludedWalletIds: void 0, explorerRecommendedWalletIds: void 0, termsOfServiceUrl: void 0, privacyPolicyUrl: void 0 });
var C = { state: y, subscribe(e) {
  return subscribe(y, () => e(y));
}, setConfig(e) {
  var t, s;
  $.initialize(), c.setChains(e.chains), c.setIsAuth(Boolean(e.enableAuthMode)), c.setIsCustomMobile(Boolean((t = e.mobileWallets) == null ? void 0 : t.length)), c.setIsCustomDesktop(Boolean((s = e.desktopWallets) == null ? void 0 : s.length)), i.setModalVersionInStorage(), Object.assign(y, e);
} };
var W = "https://explorer-api.walletconnect.com";
async function L(e, t) {
  const s = new URL(e, W);
  return s.searchParams.append("projectId", C.state.projectId), Object.entries(t).forEach(([o, r]) => {
    r && s.searchParams.append(o, String(r));
  }), (await fetch(s)).json();
}
var m = { async getDesktopListings(e) {
  return L("/w3m/v1/getDesktopListings", e);
}, async getMobileListings(e) {
  return L("/w3m/v1/getMobileListings", e);
}, async getInjectedListings(e) {
  return L("/w3m/v1/getInjectedListings", e);
}, async getAllListings(e) {
  return L("/w3m/v1/getAllListings", e);
}, getWalletImageUrl(e) {
  return `${W}/w3m/v1/getWalletImage/${e}?projectId=${C.state.projectId}`;
}, getAssetImageUrl(e) {
  return `${W}/w3m/v1/getAssetImage/${e}?projectId=${C.state.projectId}`;
} };
var P = Object.defineProperty;
var O = Object.getOwnPropertySymbols;
var _ = Object.prototype.hasOwnProperty;
var R = Object.prototype.propertyIsEnumerable;
var U = (e, t, s) => t in e ? P(e, t, { enumerable: true, configurable: true, writable: true, value: s }) : e[t] = s;
var B = (e, t) => {
  for (var s in t || (t = {}))
    _.call(t, s) && U(e, s, t[s]);
  if (O)
    for (var s of O(t))
      R.call(t, s) && U(e, s, t[s]);
  return e;
};
var D = i.isMobile();
var d = proxy({ wallets: { listings: [], total: 0, page: 1 }, search: { listings: [], total: 0, page: 1 }, recomendedWallets: [] });
var G = { state: d, async getRecomendedWallets() {
  const { explorerRecommendedWalletIds: e, explorerExcludedWalletIds: t } = C.state;
  if (e === "NONE" || t === "ALL" && !e)
    return d.recomendedWallets;
  if (i.isArray(e)) {
    const s = { recommendedIds: e.join(",") }, { listings: o } = await m.getAllListings(s), r = Object.values(o);
    r.sort((u, v) => {
      const w = e.indexOf(u.id), f = e.indexOf(v.id);
      return w - f;
    }), d.recomendedWallets = r;
  } else {
    const { chains: s, isAuth: o } = c.state, r = s == null ? void 0 : s.join(","), u = i.isArray(t), v = { page: 1, sdks: o ? "auth_v1" : void 0, entries: i.RECOMMENDED_WALLET_AMOUNT, chains: r, version: 2, excludedIds: u ? t.join(",") : void 0 }, { listings: w } = D ? await m.getMobileListings(v) : await m.getDesktopListings(v);
    d.recomendedWallets = Object.values(w);
  }
  return d.recomendedWallets;
}, async getWallets(e) {
  const t = B({}, e), { explorerRecommendedWalletIds: s, explorerExcludedWalletIds: o } = C.state, { recomendedWallets: r } = d;
  if (o === "ALL")
    return d.wallets;
  t.search || (r.length ? t.excludedIds = r.map((S) => S.id).join(",") : i.isArray(s) && (t.excludedIds = s.join(","))), i.isArray(o) && (t.excludedIds = [t.excludedIds, o].filter(Boolean).join(",")), c.state.isAuth && (t.sdks = "auth_v1");
  const { page: u, search: v } = e, { listings: w, total: f } = D ? await m.getMobileListings(t) : await m.getDesktopListings(t), E = Object.values(w), A = v ? "search" : "wallets";
  return d[A] = { listings: [...d[A].listings, ...E], total: f, page: u ?? 1 }, { listings: E, total: f };
}, getWalletImageUrl(e) {
  return m.getWalletImageUrl(e);
}, getAssetImageUrl(e) {
  return m.getAssetImageUrl(e);
}, resetSearch() {
  d.search = { listings: [], total: 0, page: 1 };
} };
var I = proxy({ open: false });
var Q = { state: I, subscribe(e) {
  return subscribe(I, () => e(I));
}, async open(e) {
  return new Promise((t) => {
    const { isUiLoaded: s, isDataLoaded: o } = c.state;
    if (c.setWalletConnectUri(e == null ? void 0 : e.uri), c.setChains(e == null ? void 0 : e.chains), N.reset("ConnectWallet"), s && o)
      I.open = true, t();
    else {
      const r = setInterval(() => {
        const u = c.state;
        u.isUiLoaded && u.isDataLoaded && (clearInterval(r), I.open = true, t());
      }, 200);
    }
  });
}, close() {
  I.open = false;
} };
var H = Object.defineProperty;
var M = Object.getOwnPropertySymbols;
var V = Object.prototype.hasOwnProperty;
var K = Object.prototype.propertyIsEnumerable;
var j = (e, t, s) => t in e ? H(e, t, { enumerable: true, configurable: true, writable: true, value: s }) : e[t] = s;
var z = (e, t) => {
  for (var s in t || (t = {}))
    V.call(t, s) && j(e, s, t[s]);
  if (M)
    for (var s of M(t))
      K.call(t, s) && j(e, s, t[s]);
  return e;
};
function J() {
  return typeof matchMedia < "u" && matchMedia("(prefers-color-scheme: dark)").matches;
}
var b = proxy({ themeMode: J() ? "dark" : "light" });
var X = { state: b, subscribe(e) {
  return subscribe(b, () => e(b));
}, setThemeConfig(e) {
  const { themeMode: t, themeVariables: s } = e;
  t && (b.themeMode = t), s && (b.themeVariables = z({}, s));
} };
var g = proxy({ open: false, message: "", variant: "success" });
var Y = { state: g, subscribe(e) {
  return subscribe(g, () => e(g));
}, openToast(e, t) {
  g.open = true, g.message = e, g.variant = t;
}, closeToast() {
  g.open = false;
} };
typeof window < "u" && (window.Buffer || (window.Buffer = import_buffer.Buffer), window.global || (window.global = window), window.process || (window.process = { env: {} }), window.global || (window.global = window));

export {
  N,
  i,
  $,
  c,
  C,
  G,
  Q,
  X,
  Y
};
//# sourceMappingURL=chunk-CCOKLYMK.js.map
